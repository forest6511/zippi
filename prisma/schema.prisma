// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthProvider {
  EMAIL  @map("email")
  GOOGLE @map("google")
  APPLE  @map("apple")
  LINE   @map("line")
}

enum UserRole {
  USER  @map("user")
  ADMIN @map("admin")
}

model User {
  id            String       @id @default(uuid(7)) @map("id") @db.Uuid
  email         String       @unique @map("email") @db.VarChar(255)
  password      String?      @map("password") @db.VarChar(100)
  name          String?      @map("name") @db.VarChar(50)
  role          UserRole     @default(USER) @map("role")
  provider      AuthProvider @default(EMAIL) @map("provider")
  providerId    String?      @map("provider_id") @db.VarChar(100)
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  emailVerified DateTime?    @map("email_verified")
  active        Boolean      @default(true) @map("active")
  accounts      Account[]

  @@map("users")
}

model Account {
  id                String   @id @default(uuid(7)) @map("id") @db.Uuid
  userId            String   @map("user_id") @db.Uuid
  type              String   @map("type") @db.VarChar(20)
  provider          String   @map("provider") @db.VarChar(20)
  providerAccountId String   @map("provider_account_id") @db.VarChar(100)
  refresh_token     String?  @map("refresh_token") @db.VarChar(2000)
  access_token      String?  @map("access_token") @db.VarChar(2000)
  expires_at        Int?     @map("expires_at")
  token_type        String?  @map("token_type") @db.VarChar(20)
  scope             String?  @map("scope") @db.VarChar(500)
  id_token          String?  @map("id_token") @db.VarChar(2000)
  session_state     String?  @map("session_state") @db.VarChar(100)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}
